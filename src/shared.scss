// #
// shared.scss
// constant variables, mixins and utility classes for use throughout the app.
// #

// ## Variables

// ### Break points
$breakPointSmall: 787px;
$breakPointMed: 1092px;
$breakPointLarge: 1205px;
$breakPointXL: 1380px;

// ### Colors
// color variables used throughout the app.
$blue: #448EE1;
$blueHover: #3A7CC6;
$darkblue: #3670B2;
$red: #E55E5E;
$yellow: #ffbf00;
$green: #62AC82;
$pink: #f65c8c;
$lightPink: #fbbed1;
$ligherPink: #fdebf0;
$darkPink: #c35578;
$urlGreen: #62AC82;
$eventBlue: #1DAFEC;
$action-red: #ff5456;

$light-blue: #a1c6f0;
$lighter-blue: #d8e7f9;
$lightest-blue: #e5effc;
$dark-blue: #0D283F;
// Used on payment info dialog and sidecar-form inputs
$blue-alternative: #1DAFEC;

// Grays, $gray-x
// -x corresponds to first value in hex
$gray-1: #121212;
$gray-3: #3A4B59;
$gray-4: #4B6274;
$gray-5: #5d6f83;
$gray-9: #96A2AC;
$gray-c: #C8D2D9;
$gray-d: #D9E1E7;
$gray-e: #E4E8EB;
$gray-e3: #E3E8F0;
$gray-f: #F9F9F9;
$gray-fc: #FCFCFC;

// BlessÃ©d brand- colors
$brand-blue: $blue;
$brand-blue-light: #A1C6F0;
$brand-green: #65AB83;
$brand-red: #E35F61;
$brand-yellow: #f7bf00;
$brand-pink-gradient: linear-gradient(136deg, #98349b, #c94693 29%, #ef558d 52%, #f8bc05 98%, #f8bc05 98%, #f8bc05 98%, #f8c000);

$notifyInfoText: #E75D5B;
$notifyInfoBg: #C07F1A;
$notifyInfoBorder: #E2C083;
$notifyErrorText: #E75D5B;
$notifyErrorBg: #FAE3E3;
$notifyErrorBorder: #E75D5B;
$notifySuccessText: #04A94A;
$notifySuccessBg: #E8F7ED;
$notifySuccessBorder: #25B75D;

$paymentGreen: #6bb052;

// (Ex)ternal colors to achieve gradients used in marketing site
$ex-dark-blue: #0D283F;
$ex-yellow: #f7bf00;
$ex-pink: #f8598b;
$ex-purple: #973999;

// Semantically functional color variables
$text-base: $gray-3;
$text-emphasized: $gray-1;
$text-muted: $gray-9;

$text-action: $blue;
$text-white: #fff;

$bg-base: $gray-f;
$bg-event-list-item: $gray-e;

// Semantically functional border variables
$border-radius-min: 2px;
$border-radius-tight: 4px;
$border-radius-medium: 6px;
$border-radius-wide: 8px;
$border-pane: 1px solid $gray-e;
$border-rect: 1px solid #D0D9E0;


// ### Magic numbers - layout, sizes
// proprietary measurements that affect the layout of the app and various elements within.
$headerHeight: 116px;
$headerCollapsedHeight: 80px;

// nav container variables, used multiple places
$navContainerWidth: 256px;
// #### V4 vars
$navContainerWidthV4: 288px;
$navItemHeight: 40px;
$searchSummaryBarHeight: 72px;
$marginBottomVal: 6px;
$inputLongWidth: 320px;
$filterBarHeight: 44px;

// used in accountlist, userlist and grid
$labelHeight: 40px;
$itemMaxHeight: 60px;

// used in playback, inspect
$eventPanelWidth: 386px;
$inspectorPadding: 16px;
$browserContentWidth: $eventPanelWidth - (2*$inspectorPadding);
$urlInfoBarHeight: 42px;

// used in omnibox and segmentheader
$omniboxWidth: 600px;
$smallOmniboxWidth: 474px;

// the max width for app content areas (segment view, highlights, etc)
$maxContentAreaWidth: 1600px;

// ### Typography
// a grab bag of variables related to typography.
$font-base: 'Whitney SSm A', 'Whitney SSm B', "Helvetica Neue", Arial, sans-serif;
$font-small-caps: 'Whitney SSm SC A', 'Whitney SSm SC B', Helvetica, Arial, sans-serif;
$font-serif: 'Sentinel SSm A', 'Sentinel SSm B', Georgia, Times, serif;
$font-serif-websafe: Georgia, Times, 'Times New Roman', serif;
$font-monospace: 'Lucida Console', Monaco, Consolas, 'Courier New', Courier, 'Lucida Sans Typewriter', 'Lucida Typewriter', monospace;
$font-monospace2: 'Fira Mono','Lucida Console', Monaco, Consolas, 'Courier New', Courier, 'Lucida Sans Typewriter', 'Lucida Typewriter', monospace;
$font-size-base: 12px;

// fw: font-weight
// names correspond to common weight names:
// https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight
$fw-bold: 700;
$fw-semibold: 600;
$fw-medium: 500;
$fw-regular: 400;
$fw-light: 300;
$fw-ultralight: 200;

$fw-base: $fw-medium;
.fw-semibold {
  font-weight: $fw-semibold;
}

// ### Z-indices
$lowest-zindex: -2147483648; // the lowest legal z-index  (-2^31)
$header-zindex: 4;           // app header. Needs to be >1 in order to be over the slidey-search-thing.
$nav-zindex: 3;              // app's left-nav area; needs to be over the header, below.
$groove-zindex: 10000;       // advisory: Groove does this on its own, so we have to dance around it.
$dialog-zindex: 10001;       // dialog-boxes - on top of everything else.
$support-zindex: 10005;
$upgrade-dialog-glass-zindex: 10006;
$upgrade-dialog-zindex: 10007;
$w-friendly-glass-zindex: 10008;
$w-friendly-dialog-zindex: 10009;
$plan-editor-zindex: 10008;
$toc-zindex: 10008;
$tooltip-zindex: 10009; // must be on top of plan editor because it has tooltips
$notification-zindex: 10010; // notifications - should be on top of everything but the spinner.
$spinner-zindex: 10011;      // the spinner - should always be on top.

$highest-zindex: 2147483647; // the highest legal z-index (2^31-1)

// ### Guest mode vars
$vs-guest-mode: 72px;
$bg-guest-mode: $gray-5;

// ### Activity Maps
// bless their hearts.

// #### Colors
$activeClickColor: $blue;
$deadClickColor: #f7ad00;
$rageClickColor: #6ebb1a;
$errorClickColor: #e35f61;
$pinkTooltip: #f65c8c;
$elemStatGray: rgba(225, 230, 238, .5);

// #### Magic numbers
$indicatorWidth: 28px;
$widgetHeight: 300px;

// #### App Bar Spacing
$baseSpace: 4px;
$space-xs: 2*$baseSpace;
$space-sm: 4*$baseSpace;
$space-md: 6*$baseSpace;
$space-lg: 8*$baseSpace;
$space-xl: 10*$baseSpace;
$space-xxl: 12*$baseSpace;

// #### Typography
.h1, .h2, .h3, .h4, .h5, .h6 { font-family: $font-base; font-weight: $fw-semibold; }
.h1, .h2 { line-height: 1.1; }
.h3, .h4 { line-height: 1.3; }
.h1 { font-size: 32px; letter-spacing: -1px; }
.h2 { font-size: 24px; }
.h3 { font-size: 22px; }
.h4 { font-size: 18px; }
.h5 { font-size: 16px; }
.h6 { font-size: 14px; }

.chevron {
  border-style: solid;
  border-width: 2px 2px 0 0;
  color: $text-base;
  display: inline-block;
  height: 8px;
  position: relative;
  transform: rotate(-45deg);
  width: 8px;

  &.sm {
    height: 6px;
    width: 6px;

  }

  &.right {
    transform: rotate(45deg);
  }
  &.left {
    transform: rotate(-135deg);
  }
  &.bottom {
    transform: rotate(135deg);
  }
}

.font-monospace2 {
  font-family: $font-monospace2;
}

// ## Utility classes and mixins

@mixin small-caps {
  font-family: $font-small-caps;
  text-transform: lowercase;
  font-weight: 300;
  color: $text-muted;
  &.interactive {
    cursor: pointer;
    transition: color .2s;
  }
  &.red-hover:hover {
    color: $brand-red;
  }
}

@mixin searchie-mono {
    font-family: 'Fira Mono', monospace;
    font-size: 12px;
    font-weight: 500;
}

@mixin no-select {
   -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
     -khtml-user-select: none; /* Konqueror HTML */
       -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* Internet Explorer/Edge */
            user-select: none; /* Non-prefixed version, currently
                                  supported by Chrome and Opera */
}

@mixin columns($widthCols, $gap: null) {
  column-gap: $gap;
  columns: $widthCols;
}

@mixin cursorGrab() {
  cursor: grab;
}

@mixin cursorRowResize() {
  cursor: row-resize;
}

// Clear div with floating content
@mixin clearfix {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}

// Set text to '...'
@mixin ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.text-ellipsis {
  @include ellipsis;
}

// Render a thin underline, when neither border-bottom nor text-decoration suit
// our needs.
//
// TODO(nishanth): The linear-gradient size may need to be adjusted to work
// with various font-sizes.
@mixin thinUnderline($color) {
  background-repeat: no-repeat;
  background-position: bottom;
  background-size: 100% 6px;
  background-image: linear-gradient(transparent, transparent 5px, $color, 5px, $color);
}

// background of gradient used in marketing site
@mixin fs-gradient() {
  background-image: linear-gradient(to bottom right, $ex-purple, $ex-pink, $ex-yellow);
}

@mixin box-sizing($x) {
  box-sizing: $x;
}

@mixin animation($x) {
  animation: $x;
}

@mixin flex($x) {
  flex: $x;
}

@mixin flex-box() {
  display: flex;
}

@mixin flex-direction($x) {
  flex-direction: $x;
}

@mixin center-contents() {
  @include flex-box;
  align-items: center;
  justify-content: center;
}

@mixin user-select($x) {
  user-select: $x;
}

@mixin box-shadow($x) {
  box-shadow: $x;
}

@mixin transition($x) {
  transition: $x;
}

@mixin transition-multi($x, $y) {
  transition: $x, $y;
}

@mixin transition-transform($x) {
  transition: transform $x;
}

@mixin transition-delay($x) {
  transition-delay: $x;
}

@mixin transform-origin($x) {
  transform-origin: $x;
}

@mixin transform($x) {
  transform: $x;
}

@mixin animation-name($name) {
  animation-name: $name;
}

@mixin animate($name, $duration, $easing) {
  @include animation-name($name);

  animation-duration: $duration;
  animation-timing-function: $easing;
}

@mixin animation-iteration($x) {
  animation-iteration-count: $x;
}

@mixin animation-fillmode($x) {
  animation-fill-mode: $x;
}

@mixin animation-delay($x) {
  animation-delay: $x;
}

@mixin animation-play-state($x) {
  animation-play-state: $x;
}

@mixin linear-gradient($direction, $color-stops...) {
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}
// TODO(radrice): convert to ems; put to use wherever breakpoints are used; settle on breakpoint defs
@mixin breakpoint($class) {
  @if $class == xs {
    @media (max-width: 767px) {
      @content;
    }
  } @else if $class == sm {
    @media (min-width: 768px) {
      @content;
    }
  } @else if $class == md {
    @media (min-width: 992px) {
      @content;
    }
  } @else if $class == lg {
    @media (min-width: 1200px) {
      @content;
    }
  } @else {
    @warn "Breakpoint mixin supports: xs, sm, md, lg";
  }
}

// ## Animations
// TODO(radrice): figure out where/if these are used

@mixin fadeIn {
  @include animation-fillmode(forwards);
  animation-duration: 0.25s;
  animation-name: fadeInKeyframe;
  animation-timing-function: ease-in-out;
}

.fadeIn {
  @include fadeIn;
}

.fadeInDelay {
  @include fadeIn;
  animation-delay: 1s;
  opacity: 0;
}

.fadeInShortDelay {
  @include fadeIn;
  animation-delay: 0.5s;
  opacity: 0;
}

@keyframes fadeInKeyframe {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@mixin fadeOut {
  @include animation-fillmode(forwards);
  animation-duration: 0.25s;
  animation-name: fadeOutKeyframe;
  animation-timing-function: ease-in-out;
}

.fadeOut {
  @include fadeOut;
}

@keyframes fadeOutKeyframe {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

.slideUpFadeIn {
  opacity: 0;
  transform: translate3d(0, 60px, 0);
  @include animate(slideUpFadeIn, 0.5s, cubic-bezier(0.3, 1, 0.32, 1));
  @include animation-fillmode(forwards);
}

@keyframes slideUpFadeIn {
  0% {
    opacity: 0;
    transform: translate3d(0, 60px, 0);
  }
  100% {
    opacity: 1.0;
    transform: translate3d(0, 0, 0);
  }
}
// HuggerLight Animations
$iconYCoord: -48px;
@keyframes slideIcon {
	0% {
		opacity: 1;
	}
	1% {
		background-position: 0 $iconYCoord;
	}
	24% {
		background-position: 0 $iconYCoord;
	}
	25% {
		background-position: 0 $iconYCoord*2;
	}
	49% {
		background-position: 0 $iconYCoord*2;
	}
	50% {
		background-position: 0 $iconYCoord*3;
	}
	74% {
		background-position: 0 $iconYCoord*3;
	}
	75% {
		background-position: 0 $iconYCoord*4;
	}
	99%{
		background-position: 0 $iconYCoord*4;
		opacity: 1;
	}
	100% {
		opacity: 0;
	}
}
@keyframes bounce {
  0% {
    transform: translateY(0);
  }
  25% {
    transform: translateY(2px);
  }
  50% {
    transform: translateY(-2px);
  }
  75% {
    transform: translateY(1px);
  }
  100% {
    transform: translateY(0)
  }
}
@keyframes embiggen {
  0% {
    transform: scale(1);
  }
  25% {
    transform: scale(1.05);
  }
  50% {
    transform: scale(1.1);
  }
  75% {
    transform: scale(1.05);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes wiggle {
  0% {
    transform: rotate(0deg);
  }
  10% {
    transform: rotate(-7deg);
  }
  25% {
    transform: rotate(7deg);
  }
  50% {
    transform: rotate(-5deg);
  }
  75% {
    transform: rotate(5deg);
  }
  100% {
    transform: rotate(0deg);
  }
}
// Console button animation
@mixin mBounce {
  animation-duration: 0.7s;
  animation-name: bounce;
}

@keyframes bounce {
  0%, 100% { transform: translateY(0); }
  20%, 60% { transform: translateY(-3px); }
  40%, 80% { transform: translateY(3px); }
}

// ## Bespoke UI elements
// TODO(radrice): find out where/if these are used
@mixin rangeTrack($inactiveColor) {
  background-color: $inactiveColor;
  cursor: pointer;
  height: 2px;
}
@mixin rangeThumb($fillColor) {
  background-color: $fillColor;
  border-radius: 16px;
  border: 1px solid $fillColor;
  cursor: pointer;
  height: 16px;
  margin-top: -7px;
  position: relative;
  width: 16px;
  &::before {
    background-color: $fillColor;
    content: '';
    display: block;
    height: 2px;
    position: absolute;
    right: 0;
    top: 6px;
    width: 100000px;
  }
}

@mixin customRange($fillColor, $inactiveColor) {
  .rangeWrapper {
    padding-top: 24px;
    position: relative;
    input[type="range"] {
      appearance: none;
      margin: 0;
      width: 100%;
      &:focus {
        outline: none;
      }
      &::-moz-focus-outer {
        border: 0;
      }
      &::-webkit-slider-runnable-track {
        @include rangeTrack($inactiveColor);
      }
      &::-webkit-slider-thumb {
        -webkit-appearance: none;
        @include rangeThumb($fillColor);
      }
      &::-moz-range-track {
        @include rangeTrack($inactiveColor);
      }
      &::-moz-range-thumb {
        @include rangeThumb($fillColor);
      }
      &::-ms-track {
        background: transparent;
        border-color: transparent;
        color: transparent;
      }
      &::-ms-fill-lower {
        background: $fillColor;
      }
      &::-ms-fill-upper {
        background: $inactiveColor;
      }
      &::-ms-thumb {
        @include rangeThumb($fillColor);
      }
    }
    &::before, &::after {
      color: $text-muted;
      font-family: $font-small-caps;
      font-weight: $fw-ultralight;
      position: absolute;
      text-transform: lowercase;
      top: 4px;
    }
    &::before {
      content: attr(data-min);
      left: 0;
    }
    &::after {
      content: attr(data-max);
      right: 0;
    }
  }
}

@mixin rewindButton($fillColor, $hoverColor, $disabledColor) {
  border-radius: 32px;
  border: 2px solid $disabledColor;
  cursor: pointer;
  height: 20px;
  line-height: 20px;
  position: relative;
  text-align: center;
  width: 20px;
  z-index: 0;
  .bitArrow {
    border-color: transparent $disabledColor transparent transparent;
    border-style: solid;
    border-width: 7px 11px 7px 0;
    height: 0;
    left: -7px;
    position: absolute;
    top: -7px;
    width: 0;
    z-index: 2;
  }
  .bitScreen {
    background-color: $gray-f;
    border-top: 2px solid $disabledColor;
    height: 9px;
    left: -4px;
    position: absolute;
    top: -2px;
    width: 14px;
    z-index: 1;
  }
  .bitCurve {
    background-color: transparent;
    border-top-right-radius: 100%;
    border-top-left-radius: 100%;
    box-shadow: 0 -1px 0 0 $disabledColor;
    height: 2px;
    left: -2px;
    position: absolute;
    top: 9px;
    width: 2px;
    z-index: 2;
  }
  .rewindLength {
    color: $disabledColor;
    font-family: $font-base;
    font-size: 12px;
    font-weight: 500;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    z-index: 3;
  }
  &.enabled {
    border-color: $fillColor;
    @include transition(border-color .1s);
    .bitArrow {
      border-color: transparent $fillColor transparent transparent;
      @include transition(all .1s);
    }
    .bitScreen {
      border-top: 2px solid $fillColor;
      @include transition(border-color .1s);
    }
    .bitCurve {
      box-shadow: 0 -1px 0 0 $fillColor;
      @include transition(box-shadow .1s);
    }
    .rewindLength {
      color: $fillColor;
      @include transition(color .1s);
    }
  }
  &.enabled:hover {
    border-color: $hoverColor;
    .bitArrow {
      border-color: transparent $hoverColor transparent transparent;
      left: -10px;
    }
    .bitScreen {
      border-top: 2px solid $hoverColor;
    }
    .bitCurve {
      box-shadow: 0 -1px 0 0 $hoverColor;
    }
    .rewindLength {
      color: $hoverColor;
    }
  }
}

@function brightness($color) {
  $sum: red($color) + green($color) + blue($color);
  @return percentage($sum / 255*3);
}

/* Function that returns either $dark or $light, whichever contrasts more with $color.
   Borrowed from the compass-style library. Source at http://compass-style.org/reference/compass/utilities/color/contrast/ */
@function contrast-color($color, $dark, $light) {
  $color-brightness: brightness($color);
  $dark-brightness: brightness($dark);
  $light-brightness: brightness($light);

  @if abs($color-brightness - $light-brightness) > abs($color-brightness - $dark-brightness) {
    @return $light;
  }
  @return $dark;
}

/* Putting this here because it's used across several htmto/scss files */
@mixin themed-searchie($themeColor) {
  .video-link {
    color: $themeColor;
  }
  .setting.menu:after {
    background-color: $themeColor;
  }
  .link {
    color: $themeColor;
  }
  .top .actions-more:hover {
    background-color: #f5f6f7;
    .actions-more-label {
      color: $themeColor;
      opacity: 1;
    }
    .actions-more-icon {
      background-color: $themeColor;
    }
  }
  /* Not all searchies have these styles, but we want the theme apply to the ones that do */
  $textColor: contrast-color($themeColor, $text-base, $text-white);
  .Histogram {
    .more {
      color: $themeColor;
      cursor: pointer;
    }
    .ring.outer {
      background-color: $themeColor;
    }
  }
  .HistogramBar {
    .innerBar {
      background-color: $themeColor;
    }
    .elementLabel::after {
      color: $themeColor;
    }
    &:hover {
      .elementLabel .labelText {
        max-width: 50%;
      }
      .elementLabel::after {
        margin-left: 8px;
        content: "â Add to search";
      }
      .valueLabel {
        color: $themeColor;
      }
    }
  }
  .BarChartBar {
    .bar-fill {
      background-color: $themeColor;
      .bar-text {
        color: $textColor;
      }
    }
  }
  .TableSearchie {
    tr.tableSearchieRow:hover {
      cursor: pointer;
      td:first-child::after, td:not(:first-child) {
        color: $themeColor;
      }
      td:first-child::after {
      	margin-left: 8px;
      }
    }
  }
  .HistogramTableSearchie {
    .innerHistogramBar {
      background-color: $themeColor;
    }
  }
}

$searchieIconWidth: 48px;
@function searchie-icon-x-pos($n) {
  @return -1 * $searchieIconWidth * $n;
}

// TODO(radrice): this should be part of a larger, custom element reset if we want to keep it
// Note: Also be careful increasing the specificity of this any further, will end up clobbering other button based elements' rules
// (which is why we can't keep adding classes to the ':not' list)
button:not(.buttonReset) {
  @include transition(background-color .2s ease-in-out);
  border: none;
  border-radius: $border-radius-tight;
  color: #fff;
  cursor: pointer;
  font-family: $font-base;
  font-size: 12px;
  line-height: 1.5em;
  margin: 10px 10px 5px 0;
  padding: 8px 14px;
}

.button-like-link {
  @include transition(background-color .2s ease-in-out);
  border: none;
  border-radius: $border-radius-tight;
  color: #fff;
  cursor: pointer;
  font-family: $font-base;
  font-size: 13px;
  line-height: 1.5em;
  padding: 8px 14px;
  &:hover {
    text-decoration: none;
  }
}
.button-inline-text {
  display: inline-block;
  font-size: 13px;
  line-height: 1.5em;
  padding: 8px 14px;
  &.is-link {
    color: $blue;
    cursor: pointer;
    &:hover {
      text-decoration: underline;
    }
  }
}

// TODO(radrice): discern how/where are these buttons used

@mixin blueBtn() {
  background-color: $blue;

  &:hover {
    background-color: $blueHover;
  }
  &[disabled] {
    background-color: #ccc;
  }
}

.additionalBtn, // Additional Btn is unfortunately just for code to find in tests since it can't search by our _refs
.submitBtn,
.saveBtn {
  @include blueBtn();
}

.cancelBtn {
  background: #c8d2d9;
  color: #666;
}

// Helper classes

// Display mods
.d-block {
  display: block;
}

// Text align (OVERRIDE POWER!)
.text-left {
  text-align: left!important;
}
.text-center {
  text-align: center!important;
}
.text-right {
  text-align: right!important;
}

// Font weights
.heavy-weight {
  font-weight: $fw-semibold;
}
.normal-weight {
  font-weight: $fw-base;
}
.light-weight {
  font-weight: $fw-regular;
}
.lightest-weight {
  font-weight: $fw-ultralight;
}

// Line heights
.lh-copy {
  line-height: 1.5;
}
.lh-headline {
  line-height: 2;
}

// Text colors
.text-muted {
  color: $text-muted;
}
.text-emphasized {
  color: $text-emphasized;
}

// Background colors
.bg-white {
  background-color: #fff;
}
.bg-blue {
  background-color: $blue;
}
.bg-green {
  background-color: $brand-green;
}
.bg-red {
  background-color: $brand-red;
}

// Text colors
.text-placeholder {
  color: $text-muted;
}
.text-blue {
  color: $blue;
}
.text-red {
  color: $brand-red;
}
// Unmagic margins
.m-tb-16 {
  margin-top: 16px;
  margin-bottom: 16px;
}
.m-b-16 {
  margin-bottom: 16px;
}
.m-b-24 {
  margin-bottom: 24px;
}
.m-t-16 {
  margin-top: 16px;
}

// When it needs to be a custom input or select or button
.selectReset,
.inputReset {
  appearance: none;
  &:focus {
    outline: none;
  }
}
.buttonReset {
  appearance: none;
  background: none;
  border: none;
  color: inherit;
  font: inherit;
  line-height: normal;
  margin: 0;
  padding: 0;
  &::focus-inner {
    border: 0;
    padding: 0;
  }
}

.end {
  display: flex;
  justify-content: flex-end;
}

// When it needs to be hidden completely
.hidden {
  display: none!important;
}

// When it needs to be able to fade
.fadeable {
  @include transition(opacity 0.15s ease-in-out);
}
@media print {
  body * {
    visibility: hidden;
  }
  .invoice-zone,
  .invoice-zone * {
    visibility: visible;
  }
  .invoice-zone {
    box-shadow: 0 0 0 #fff;
    border: none;
    border-radius: 0;
    left: 0;
    position: absolute;
    top: 0;
  }
}

@keyframes pulseKeyFrame {
  0% { box-shadow: 0 0 0 0px rgba(0, 0, 0, 0); }
  25%  { box-shadow: 0 0 0 2px $pink; }
  75%  { box-shadow: 0 0 0 2px $pink; }
  100% { box-shadow: 0 0 0 0px rgba(0, 0, 0, 0); }
}

@mixin pulsePink {
  animation-name: pulseKeyFrame;
  animation-duration: 1s;
}

.pulse {
  @include pulsePink;
  border-radius: $border-radius-medium;
}

[data-tooltip] {
  &:focus, &:hover{
    &::after {
      content: attr(data-tooltip);
      overflow: visible;
      background: #fff;
      position: absolute;
      left: 3.8rem;
      top: auto;
      width: auto;
      max-width: 85%;
      border: 1px solid $gray-e;
      padding: 0 .5rem;
      box-shadow: 0 2px 4px 0 rgba(0,0,0,.28);
      white-space: normal;
      word-wrap: break-word;
      display: block;
      margin-top: -1.15rem;
    }
  }
}

// Cheap maps live here
$map-color-list: #EA1995 #DE188E #DE239B #D42B9F #C734A4 #B343AD #A54FB3 #9958B8 #8D61BE #7B6EC4 #667ECD #5A88D3 #4B94DA #4299DD #2FA9E6 #20B5ED #1BC1F2 #28C4F3 #3AC8F4 #4FCDF5 #69D2F6 #79D6F7 #8FDAF7 #A0DEF8 #BBE4FA;
$map-colors: $map-color-list;
.pageInsights.is-map-mode {
  @each $map-color in $map-colors {
    $i: index($map-colors, $map-color);
    .map-color-#{$i} {
      z-index: #{26 - $i};
      border-radius: 100%!important;
      border-width: 0!important;
      background: radial-gradient(rgba($map-color, .9) 0%, transparent 75%) center center no-repeat;
    }
  }
  .highlights>.rect {
    &.selected {
      border-color: transparent;
      &.dead, &.rage, &.error {
        border-color: transparent;
      }
    }
  }
  .RankIndicator {
    height: 0;
    width: 0;
    overflow: hidden;
  }
  .map-key {
    display: block;
  }
  .masker.is-showing {
    opacity: .7;
  }
}

@mixin appearanceNone {
  -moz-appearance: none;
  -webkit-appearance: none;
}
